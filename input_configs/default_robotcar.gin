# root is ~/FeatureMetric-BA/

import visualization.plot_correspondences

include 's2dhm/configs/datasets/robotcar.gin'
include 's2dhm/configs/network/network.gin'
include 's2dhm/configs/pose_prediction/sparse_to_dense_pose_prediction.gin'
include 'featurePnP/model.gin'

# for d2net
include 's2dhm/configs/network/d2-net.gin'

# Image logs
plot_correspondences.plot_correspondences.export_folder = 'logs/sparse_to_dense/correspondences/cmu/'
plot_correspondences.plot_image_retrieval.export_folder = 'logs/sparse_to_dense/nearest_neighbor/cmu/'

RUN_NAME = "robotcar"
OUTPUT_DIR = "results/robotcar"
CSV_NAME = "featurePnP_summary.csv"

# Pre-trained model weights
ImageRetrievalModel.checkpoint_path = 'checkpoints/robotcar/weights.pth.tar'
ImageRetrievalModel.hypercolumn_layers = [9, 14, 17,21, 24] #[14, 17, 21, 24, 28]

# Change only first
SparseToDensePredictor.output_filename = 'sparse_to_dense_predictions.txt'
SparseToDensePredictor.output_csvname = %CSV_NAME
SparseToDensePredictor.output_path = %OUTPUT_DIR
SparseToDensePredictor.cache_filename = 'cache_results.npz'
SparseToDensePredictor.track = False

# for d2-net features
SparseToDensePredictor.features = 's2dhm' # ['s2dhm' or 'd2-net']

# Output parameters
IOgin.name = %RUN_NAME
IOgin.csv_name = %CSV_NAME
IOgin.output_dir = %OUTPUT_DIR

##Choose Data
RobotCarDataset.reference_sequences = ['overcast-reference']
RobotCarDataset.query_sequences = ['dawn', 'dusk', 'night', 'night-rain', 'overcast-summer', 'overcast-winter', 'rain', 'snow', 'sun']


## Model Parameters:
sparseFeaturePnP.loss_fn = @geman_mcclure_loss# @squared_loss #@cauchy_loss, ...
sparseFeaturePnP.ratio_threshold = None
sparseFeaturePnP.n_iters = 50

# Other parameters:

get_pose_predictor.pose_predictor_cls = @SparseToDensePredictor
SparseToDensePredictor.top_N = 10
SparseToDensePredictor.track = False # do you want to track all the points during optimization?

# PnP Parameters
solve_pnp.reprojection_threshold = 12.0
solve_pnp.minimum_inliers = 12
solve_pnp.minimum_matches = 5
solve_pnp.use_ransac = True ##IMPORTANT##
solve_pnp.return_masked = True

# Exhaustive search parameters
exhaustive_search.factor = 0.006

# Optimizer parameters
optimize_feature_pnp.image_shape = [1024, 1024]
optimize_feature_pnp.feature_pyramid = [(640,1664,None,None),(128,640,None,None),(0,128,None,None)]
# optimize_feature_pnp.feature_pyramid = [(1152,1664,None,None),(640,1152,None,None),(384,640,None,None),(128,384,None,None),(0,128,None,None)]

